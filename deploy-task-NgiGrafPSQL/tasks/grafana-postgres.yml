--- # Grafana and docker deployment
  - name: Pre-installation for gpg
    ansible.builtin.apt:
      pkg:
      - ca-certificates
      - curl
      - gnupg
      update_cache: true

  - name: Add docker GPG key
    ansible.builtin.get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/trusted.gpg.d/docker.asc
      mode: 0644
      force: true

  - name: Add docker repository to apt
    ansible.builtin.apt_repository:
      repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/ubuntu   jammy stable"
      state: present
      filename: "docker"
      update_cache: true  

  - name: Docker installation
    ansible.builtin.apt:
      pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      update_cache: true      

  - name: Install pip3
    ansible.builtin.apt:
      name: python3-pip
      state: present

  - name: Install docker python package
    ansible.builtin.pip:
      name: docker
    
  - name: Install docker python package
    ansible.builtin.pip:
      name: docker-compose
    
  - name: Put docker-compose on remote host
    ansible.builtin.copy:
      src: psql_grafana
      dest: /home/{{ owner }}/
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0664

  - name: Put custom.ini from jinja template
    template:
      src: "custom.ini.jinja2"
      dest: /home/{{ owner }}/psql_grafana/grafana/custom.ini
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0755   

  - name: Put datasource postgresql yml file from jinja template
    template:
      src: "default.yml.jinja2"
      dest: /home/{{ owner }}/psql_grafana/grafana/provisioning/datasources/default.yml
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0755 

  - name: Put docker-compose.yml from jinja template
    template:
      src: "docker-compose.yml.jinja2"
      dest: /home/{{ owner }}/psql_grafana/docker-compose.yml
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0755 

  - name: Put postgresql initdb script from jinja template
    template:
      src: "initdb.sh.jinja2"
      dest: /home/{{ owner }}/psql_grafana/postgres-initdb/initdb.sh
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0755 

  - name: Starting containers via docker-compose
    community.docker.docker_compose:
      project_src: /home/{{ owner }}/psql_grafana/
    vars:
      ansible_python_interpreter: /bin/python3
    register: docker_output

  - name: Docker up debug
    ansible.builtin.debug:
      var: docker_output
