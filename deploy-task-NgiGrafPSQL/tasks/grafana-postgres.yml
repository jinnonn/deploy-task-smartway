--- # Grafana and docker deployment

  - name: Put docker install script on remote host
    ansible.builtin.copy:
      src: docker-install.sh
      dest: /tmp
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 755
  
  - name: Start docker installation
    ansible.builtin.command: 
      cmd: /tmp/docker-install.sh
    register: docker_install_output
  
  - name: installation debug
    ansible.builtin.debug:
      var: docker_install_output.stdout_lines

  - name: Install pip3
    ansible.builtin.apt:
      name: python3-pip
      state: present

  - name: Install docker python package
    ansible.builtin.pip:
      name: docker
    
  - name: Install docker python package
    ansible.builtin.pip:
      name: docker-compose
    
  - name: Put docker-compose on remote host
    ansible.builtin.copy:
      src: psql_grafana
      dest: /home/{{ owner }}/
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0664

  - name: Put custom.ini from jinja template
    template:
      src: "custom.ini.jinja2"
      dest: /home/{{ owner }}/psql_grafana/grafana/custom.ini
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0755   

  - name: Put datasource postgresql yml file from jinja template
    template:
      src: "default.yml.jinja2"
      dest: /home/{{ owner }}/psql_grafana/grafana/provisioning/datasources/default.yml
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0755 

  - name: Put docker-compose.yml from jinja template
    template:
      src: "docker-compose.yml.jinja2"
      dest: /home/{{ owner }}/psql_grafana/docker-compose.yml
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0755 

  - name: Starting containers via docker-compose
    community.docker.docker_compose:
      project_src: /home/{{ owner }}/psql_grafana/
    vars:
      ansible_python_interpreter: /bin/python3
    register: docker_output

  - name: Docker up debug
    ansible.builtin.debug:
      var: docker_output